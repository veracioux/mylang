%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER -> _SIGNED_NUMBER
%import common.WS_INLINE -> _WS_INLINE
%import common.WS -> _WS
%import common.NEWLINE -> _NEWLINE
%import common._STRING_ESC_INNER
%import common.SH_COMMENT

BOOL: "true" | "false"
NULL: "null"
UNDEFINED: "undefined"
UNQUOTED_STRING: /(?!true\b|false\b|null\b|undefined\b)[a-z_][a-z0-9_]*/i
SIGNED_NUMBER.100: _SIGNED_NUMBER
_OPERATOR_SYMBOL: /[+\-*\/%&|^~!<>?:@\$\\`]/
?string: ESCAPED_STRING | UNQUOTED_STRING

?primitive: BOOL | NULL | UNDEFINED | SIGNED_NUMBER

// TODO: Assignment could perhaps be a special case of binary operation
assignment: expression _WS_INLINE* "=" _WS_INLINE* expression
!operator: _OPERATOR_SYMBOL+
        | ("=" (_OPERATOR_SYMBOL | "=")+)
        | ((_OPERATOR_SYMBOL | "=")+ "=")
// NOTE: The below precedence is set to obtain desired precedence within the
// operator group, not globally
prefix_operation: operator expression
postfix_operation: expression operator
binary_operation.3: (expression operator expression)
                | (expression _WS+ operator _WS+ expression)
_any_operation: prefix_operation | postfix_operation | binary_operation

_ARG_SEPARATION_EXPLICIT: _WS_INLINE* "," _WS*
_ARG_SEPARATION: _WS_INLINE+ | _ARG_SEPARATION_EXPLICIT

// Args
_single_expression_args: _WS_INLINE* expression _ARG_SEPARATION_EXPLICIT _WS_INLINE*
_positional_args: _WS_INLINE* (expression (_ARG_SEPARATION expression)+ | _single_expression_args) _WS_INLINE*
_keyed_args: _WS_INLINE* assignment (_ARG_SEPARATION assignment)* [_ARG_SEPARATION]

_explicit_args: _positional_args
              | _keyed_args
              | ((_positional_args | expression) _ARG_SEPARATION _keyed_args)

args.1: _explicit_args

// List of statements
_statement: expression | args
_statement_separation: (_WS_INLINE* (";" | _NEWLINE) _WS*)+
// A single expression or multiple statements
statement_list: [_WS* _statement (_statement_separation _statement)*] _statement_separation?

// Dict
// Priority 2 is given over array's priority 1
dict.2: "(" _WS* [_explicit_args] _WS_INLINE* ")"

// Array
array.1: "(" _WS* (expression _statement_separation)+ expression? ")"

// Execution block
execution_block: "{" _WS* statement_list _WS* "}"

// Expression - any expression that can be evaluated to produce a value
?expression: string
           | primitive
           | dict
           | ("(" expression ")")
           | execution_block
           | array
           | ("(" _WS* statement_list _WS* ")")
           | _any_operation

%ignore SH_COMMENT
