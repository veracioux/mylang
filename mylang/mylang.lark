%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER -> _SIGNED_NUMBER
%import common.WS_INLINE -> _WS_INLINE
%import common.WS -> _WS
%import common.NEWLINE -> _NEWLINE
%import common._STRING_ESC_INNER
%import common.SH_COMMENT


// Terminals

SINGLE_QUOTED_STRING : "'" _STRING_ESC_INNER "'"
BOOL: "true" | "false"
NULL: "null"
UNDEFINED: "undefined"
UNQUOTED_STRING: /(?!true\b|false\b|null\b|undefined\b)[a-z_][a-z0-9_]*/i
SIGNED_NUMBER.1: _SIGNED_NUMBER
_DOTS: /\.+/
DOTS: _DOTS
_OPERATOR_SYMBOL: /[+\-*\/%&|^~!<>?:@\$\\`]/


// Basic literals

?string: ESCAPED_STRING | SINGLE_QUOTED_STRING | UNQUOTED_STRING
?primitive: BOOL | NULL | UNDEFINED | SIGNED_NUMBER

// Operations and assignment

// TODO: Assignment could perhaps be a special case of binary operation
assignment: expression _WS_INLINE* "=" _WS_INLINE* expression
!operator: _OPERATOR_SYMBOL+
        | ("=" (_OPERATOR_SYMBOL | "=")+)
        | ((_OPERATOR_SYMBOL | "=")+ "=")
// NOTE: The below precedence is set to obtain desired precedence within the
// operator group, not globally
prefix_operation: operator expression
postfix_operation: expression operator
binary_operation.3: (expression operator expression)
                | (expression _WS+ operator _WS+ expression)
_any_operation: prefix_operation | postfix_operation | binary_operation


// Args

_ARG_SEPARATION_EXPLICIT: _WS_INLINE* "," _WS*
_ARG_SEPARATION: _WS_INLINE+ | _ARG_SEPARATION_EXPLICIT

_arg_and_comma: expression _ARG_SEPARATION_EXPLICIT
_positional_args: (expression (_ARG_SEPARATION expression)+ | _arg_and_comma)
_keyed_args: _WS_INLINE* assignment (_ARG_SEPARATION assignment)* [_ARG_SEPARATION]

_args: _positional_args
     | _keyed_args
     | ((_positional_args | expression) _ARG_SEPARATION _keyed_args)

args.1: _args


// List of statements
_statement: expression | args
_statement_separation: (_WS_INLINE* (";" | _NEWLINE) _WS*)+
// A single expression or multiple statements
statement_list: (_statement _statement_separation)+ _statement?
execution_block_single_statement: (_positional_args _keyed_args?)
                                | expression
execution_block: "{" _WS* (statement_list | execution_block_single_statement) _WS* "}"


// Data structures

dict.2: "{" _WS* [_keyed_args] _WS_INLINE* "}"
array.1: "(" _WS* [_positional_args] ")"
wrapped_args: "(" _args ")"


// Expression - any expression that can be evaluated to produce a value

_expression_not_path: string
           | primitive
           | dict
           | execution_block
           | array
           | wrapped_args
           | _any_operation
           | ("(" expression ")")
           | ("(" _WS* statement_list _WS* ")")
?expression: _expression_not_path
           | path

// TODO: Disallow unparenthesized floats
dots: DOTS
path: (dots? (_expression_not_path _DOTS)+ _expression_not_path dots?)
    | (dots _expression_not_path)
    | (_expression_not_path dots)

module: _WS* (statement_list? | args | expression) _WS*

%ignore SH_COMMENT
