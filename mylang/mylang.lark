%import common.ESCAPED_STRING
%import common.SIGNED_NUMBER
%import common.WS_INLINE -> _WS_INLINE
%import common.WS -> _WS
%import common.NEWLINE -> _NEWLINE
%import common._STRING_ESC_INNER

BOOL: "true" | "false"
NULL: "null"
UNDEFINED: "undefined"
UNQUOTED_STRING: /(?!true\b|false\b|null\b|undefined\b)[a-z][a-z0-9]*/i
?string: ESCAPED_STRING | UNQUOTED_STRING

?primitive: BOOL | NULL | UNDEFINED | SIGNED_NUMBER

assignment: expression _WS_INLINE* "=" _WS_INLINE* expression

_ARG_SEPARATION_EXPLICIT: _WS_INLINE* "," _WS*
_ARG_SEPARATION: _WS_INLINE+ | _ARG_SEPARATION_EXPLICIT

// Args
_single_expression_args: _WS_INLINE* expression _ARG_SEPARATION_EXPLICIT _WS_INLINE*
_positional_args: _WS_INLINE* (expression (_ARG_SEPARATION expression)+ | _single_expression_args) _WS_INLINE*
_keyed_args: _WS_INLINE* assignment (_ARG_SEPARATION assignment)* [_ARG_SEPARATION]

_explicit_args: _positional_args
              | _keyed_args
              | ((_positional_args | expression) _ARG_SEPARATION _keyed_args)

_args: expression | _explicit_args
args.1: _explicit_args

_statement_separation: (_WS_INLINE* (";" | _NEWLINE) _WS*)+
?statement_list: (_args | args) (_statement_separation (args | _args))* [_statement_separation]

// Dict
dict: "(" _WS* _explicit_args _WS* ")"

// Expression - any expression that can be evaluated to produce a value
?expression: string | primitive | dict | ("(" expression ")")

%ignore _WS_INLINE
